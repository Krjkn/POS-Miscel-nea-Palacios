
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Angel
 */
public class Ventas extends javax.swing.JFrame {
static boolean signInStatus = false;
public static ArrayList<ProductList> cartItem = new ArrayList();
detVentaObject detv = new detVentaObject();
    VentaObject v = new VentaObject();
    ProductList p = new ProductList();
    private VariablesParaImprimirTicket variablesTicket;
   
   
    /**
     * Creates new form Ventas
     */
    public Ventas() {
        initComponents();
        mostrarDatos();
        //sellButon.setEnabled(false);
        
        txtBusqueda.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBusqueda1 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        Products = new javax.swing.JButton();
        Usuarios = new javax.swing.JButton();
        back = new javax.swing.JButton();
        homePanel = new javax.swing.JPanel();
        cartPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartItemTable = new javax.swing.JTable();
        billLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sellButon = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtBusqueda = new javax.swing.JTextField();
        Buscar = new javax.swing.JButton();
        delEntry = new javax.swing.JButton();
        Efectivo = new javax.swing.JTextField();
        billingPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        billingTable = new javax.swing.JTable();
        fechaInicio = new com.toedter.calendar.JDateChooser();
        fechaFinL = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        gananciasLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        precioVenta = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(1, 110, 145));
        jPanel2.setPreferredSize(new java.awt.Dimension(1199, 72));

        jLabel1.setBackground(new java.awt.Color(1, 110, 145));
        jLabel1.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Panel de Ventas");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));

        txtBusqueda1.setBackground(new java.awt.Color(0, 173, 188));
        txtBusqueda1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtBusqueda1.setForeground(new java.awt.Color(255, 255, 255));
        txtBusqueda1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBusqueda1.setBorder(null);
        txtBusqueda1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtBusqueda1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBusqueda1MouseClicked(evt);
            }
        });
        txtBusqueda1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBusqueda1ActionPerformed(evt);
            }
        });
        txtBusqueda1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBusqueda1KeyPressed(evt);
            }
        });

        searchButton.setBackground(new java.awt.Color(0, 121, 107));
        searchButton.setFont(new java.awt.Font("Roboto", 0, 20)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8_Search_40px.png"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchButton.setOpaque(true);
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                searchButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                searchButtonMouseReleased(evt);
            }
        });
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Consulta:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 361, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(txtBusqueda1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtBusqueda1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 60));

        jPanel4.setBackground(new java.awt.Color(0, 150, 136));

        Products.setBackground(new java.awt.Color(0, 150, 136));
        Products.setFont(new java.awt.Font("Roboto", 0, 20)); // NOI18N
        Products.setForeground(new java.awt.Color(255, 255, 255));
        Products.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sell.png"))); // NOI18N
        Products.setText("Ventas");
        Products.setToolTipText("Realizar Ventas");
        Products.setBorder(null);
        Products.setBorderPainted(false);
        Products.setContentAreaFilled(false);
        Products.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Products.setOpaque(true);
        Products.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductsMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ProductsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ProductsMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ProductsMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ProductsMouseReleased(evt);
            }
        });
        Products.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductsActionPerformed(evt);
            }
        });

        Usuarios.setBackground(new java.awt.Color(0, 150, 136));
        Usuarios.setFont(new java.awt.Font("Roboto", 0, 20)); // NOI18N
        Usuarios.setForeground(new java.awt.Color(255, 255, 255));
        Usuarios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/historial.png"))); // NOI18N
        Usuarios.setText("Historial");
        Usuarios.setToolTipText("Historial de Ventas");
        Usuarios.setBorder(null);
        Usuarios.setBorderPainted(false);
        Usuarios.setContentAreaFilled(false);
        Usuarios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Usuarios.setOpaque(true);
        Usuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UsuariosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                UsuariosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                UsuariosMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                UsuariosMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                UsuariosMouseReleased(evt);
            }
        });
        Usuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsuariosActionPerformed(evt);
            }
        });

        back.setBackground(new java.awt.Color(0, 150, 136));
        back.setFont(new java.awt.Font("Roboto", 0, 20)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/casa.png"))); // NOI18N
        back.setText("Regresar");
        back.setToolTipText("Regresar al Menú Principal");
        back.setBorder(null);
        back.setBorderPainted(false);
        back.setContentAreaFilled(false);
        back.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        back.setOpaque(true);
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                backMouseReleased(evt);
            }
        });
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(Products, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Usuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(845, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Usuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Products, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 1260, 50));

        homePanel.setLayout(new java.awt.CardLayout());

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        cartItemTable.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cartItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Producto","Nombre del producto", "Descripcion", "Precio", "Cantidad","SubTotal","Descuento","Stock","Id Venta",
            }
        ));
        cartItemTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cartItemTableKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(cartItemTable);

        billLabel.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        billLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel4.setText("Efectivo");

        sellButon.setBackground(new java.awt.Color(0, 77, 64));
        sellButon.setFont(new java.awt.Font("Roboto", 0, 20)); // NOI18N
        sellButon.setForeground(new java.awt.Color(255, 255, 255));
        sellButon.setText("Vender");
        sellButon.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sellButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel5.setText("Cuenta total:");

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id","Lote","Nombre", "Descripcion", "Stock","Fecha de Caducidad","Precio","Descuento"
            }
        ));
        productTable.setToolTipText("");
        productTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        productTable.setRowHeight(20);
        productTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                productTableMouseMoved(evt);
            }
        });
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                productTableMouseEntered(evt);
            }
        });
        jScrollPane3.setViewportView(productTable);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Ingrese el Producto:");
        jLabel3.setToolTipText("");

        txtBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBusquedaActionPerformed(evt);
            }
        });
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyPressed(evt);
            }
        });

        Buscar.setText("Buscar");
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });

        delEntry.setBackground(new java.awt.Color(255, 0, 0));
        delEntry.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        delEntry.setForeground(new java.awt.Color(255, 255, 255));
        delEntry.setText("Cancelar Venta");
        delEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delEntryActionPerformed(evt);
            }
        });

        Efectivo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Efectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EfectivoActionPerformed(evt);
            }
        });
        Efectivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                EfectivoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(delEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jLabel5)
                .addGap(34, 34, 34)
                .addComponent(billLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(Efectivo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                .addComponent(sellButon, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(Buscar)
                        .addGap(37, 37, 37))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(9, 9, 9))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBusqueda)
                            .addComponent(Buscar))
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(billLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sellButon, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Efectivo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delEntry)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37))
        );

        javax.swing.GroupLayout cartPanelLayout = new javax.swing.GroupLayout(cartPanel);
        cartPanel.setLayout(cartPanelLayout);
        cartPanelLayout.setHorizontalGroup(
            cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1267, Short.MAX_VALUE)
            .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(cartPanelLayout.createSequentialGroup()
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 6, Short.MAX_VALUE)))
        );
        cartPanelLayout.setVerticalGroup(
            cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
            .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        homePanel.add(cartPanel, "card8");

        billingPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        billingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial", "Fecha y Hora", "Cuenta total", "Vendedor","Efectivo"
            }
        ));
        billingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billingTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(billingTable);

        billingPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 484));

        fechaInicio.setDateFormatString("yyyy-MM-dd");
        fechaInicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fechaInicioMouseClicked(evt);
            }
        });
        billingPanel.add(fechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 519, 158, -1));

        fechaFinL.setDateFormatString("yyyy-MM-dd");
        fechaFinL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fechaFinLMouseClicked(evt);
            }
        });
        billingPanel.add(fechaFinL, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 519, 158, -1));

        jButton1.setText("Consultar Ventas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        billingPanel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(417, 521, -1, -1));

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel6.setText("Ganancias");
        billingPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 520, -1, 32));

        gananciasLabel.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        gananciasLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        billingPanel.add(gananciasLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 520, 126, 41));

        jLabel7.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel7.setText("Total de las ventas:");
        billingPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(574, 519, -1, 32));

        precioVenta.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        precioVenta.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        billingPanel.add(precioVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 520, 126, 41));

        homePanel.add(billingPanel, "card2");

        getContentPane().add(homePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, -1, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void ProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductsMouseClicked

    private void ProductsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsMouseEntered
        // TODO add your handling code here:;
        Products.setBackground(new Color(0, 137, 123));
    }//GEN-LAST:event_ProductsMouseEntered

    private void ProductsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsMouseExited
        // TODO add your handling code here:
        Products.setBackground(new Color(0, 150, 136));
    }//GEN-LAST:event_ProductsMouseExited

    private void ProductsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsMousePressed
        // TODO add your handling code here:
        Products.setBackground(new Color(0, 77, 64));
    }//GEN-LAST:event_ProductsMousePressed

    private void ProductsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsMouseReleased
        // TODO add your handling code here:
        Products.setBackground(new Color(0, 150, 136));
    }//GEN-LAST:event_ProductsMouseReleased

    private void ProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductsActionPerformed
        homePanel.removeAll();
        homePanel.add(cartPanel);
        homePanel.repaint();
        homePanel.revalidate();
    }//GEN-LAST:event_ProductsActionPerformed

    private void UsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UsuariosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_UsuariosMouseClicked

    private void UsuariosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UsuariosMouseEntered
        // TODO add your handling code here:
        Usuarios.setBackground(new Color(0, 137, 123));
    }//GEN-LAST:event_UsuariosMouseEntered

    private void UsuariosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UsuariosMouseExited
        // TODO add your handling code here:
        Usuarios.setBackground(new Color(0, 150, 136));
    }//GEN-LAST:event_UsuariosMouseExited

    private void UsuariosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UsuariosMousePressed
        // TODO add your handling code here:
        Usuarios.setBackground(new Color(0, 77, 64));
    }//GEN-LAST:event_UsuariosMousePressed

    private void UsuariosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UsuariosMouseReleased
        // TODO add your handling code here:
        Usuarios.setBackground(new Color(0, 150, 136));
    }//GEN-LAST:event_UsuariosMouseReleased

    private void UsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsuariosActionPerformed
        homePanel.removeAll();
        homePanel.add(billingPanel);
        homePanel.repaint();
        homePanel.revalidate();
        v = new VentaObject();
        DefaultTableModel model =  (DefaultTableModel) billingTable.getModel();
        model.setRowCount(0);

        Object[] data = new Object[5];
        ArrayList<VentaObject> list = new ArrayList<>();
        list = VentaDB.ventas();

        for (int i = list.size() - 1; i >= 0; i--) {
            data[0] = list.get(i).getID();
            data[1] = list.get(i).getFecha();
            data[2] = list.get(i).getTotal();
            data[3] = list.get(i).getVendedor();
            data[4] = list.get(i).getEfectivo();

            model.addRow(data);
            billingTable.setRowHeight(20);
        }
    }//GEN-LAST:event_UsuariosActionPerformed

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_backMouseClicked

    private void backMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseEntered
        back.setBackground(new Color(0, 137, 123));
    }//GEN-LAST:event_backMouseEntered

    private void backMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseExited
        back.setBackground(new Color(0, 150, 136));
    }//GEN-LAST:event_backMouseExited

    private void backMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_backMousePressed

    private void backMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseReleased
        back.setBackground(new Color(0, 150, 136));
    }//GEN-LAST:event_backMouseReleased

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        AdminPanel da = new AdminPanel();
        da.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void sellButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButonActionPerformed
        if (Efectivo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingresa el Efectivo");
        } else {
        registrarVenta();
        registrarDetVenta();
        disminuirExistencias();
        // Obtener el total a partir de la etiqueta billLabel
        String totalStr = billLabel.getText();
        double total = Double.parseDouble(totalStr);
        
        
        limpiarTablaCarrito();
        mostrarDatos();
        TicketNotificacion ticket = new TicketNotificacion ();
        ticket.setVisible(true);
        ticket.mostrarCambio(total, Double.parseDouble(Efectivo.getText()));
        sellButon.setEnabled(Efectivo.getText().trim().isEmpty() ? false : true);
        Efectivo.setText("");
        billLabel.setText("");
        }

    }//GEN-LAST:event_sellButonActionPerformed

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        String consulta = txtBusqueda.getText();
    String sql = "SELECT * FROM productos WHERE Lote LIKE '%" + consulta + "%';";

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/miscelanea_palacios", "root", "");
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Lote");
        model.addColumn("Nombre");
        model.addColumn("Descripción");
        model.addColumn("Stock");
        model.addColumn("Fecha de Caducidad");
        model.addColumn("Precio_Venta");
        model.addColumn("Descuento");

        int rowCount = 0;
        while (rs.next()) {
            rowCount++;
            String id = rs.getString("ID_Prod");
            String lote = rs.getString("Lote");
            String nombre = rs.getString("nombre");
            String descripcion = rs.getString("descripcion");
            int Stock = rs.getInt("Stock");
            java.sql.Date fecha = rs.getDate("Fecha_Cad");
            double precio = rs.getDouble("Precio_Venta");
            double descuento = rs.getDouble("Descuento");

            if (1 > Stock) {
                JOptionPane.showMessageDialog(null, "No hay más en existencia!");
                txtBusqueda.setText("");
                return; // Detener la ejecución del código
            }

            model.addRow(new Object[] { id, lote, nombre, descripcion, Stock, fecha, precio, descuento });
        }
        //No hay coincidencias
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(null, "Sin resultados para: '" + consulta + "'.");
            txtBusqueda.setText("");
            String id = rs.getString("ID_Prod");
            String lote = rs.getString("Lote");
            String nombre = rs.getString("nombre");
            String descripcion = rs.getString("descripcion");
            int Stock = rs.getInt("Stock");
            java.sql.Date fecha = rs.getDate("Fecha_Cad");
            double precio = rs.getDouble("Precio_Venta");
            double descuento = rs.getDouble("Descuento");
            model.addRow(new Object[] { id, lote, nombre, descripcion, Stock, fecha, precio, descuento });
            
            
            
            
        } else if (rowCount == 1) {
            // Solo hay una coincidencia, agregar directamente al carrito
            int cantidad = 1;
            String id = model.getValueAt(0, 0).toString();
            String nombre = model.getValueAt(0, 2).toString();
            String descripcion = model.getValueAt(0, 3).toString();
            double precio = Double.parseDouble(model.getValueAt(0, 6).toString());
            int Stock = Integer.parseInt(model.getValueAt(0, 4).toString());
            double descuento = Double.parseDouble(model.getValueAt(0, 7).toString());

            if (cantidad > Stock) {
                JOptionPane.showMessageDialog(null, "No hay suficiente stock del producto.");
            } else {
                DefaultTableModel cartModel = (DefaultTableModel) cartItemTable.getModel();
                int existingRowIndex = -1;
                for (int i = 0; i < cartModel.getRowCount(); i++) {
                    String existingIDProducto = cartModel.getValueAt(i, 0).toString();
                    if (existingIDProducto.equals(id)) {
                        existingRowIndex = i;
                        break;
                    }
                }

                if (existingRowIndex != -1) {
                    // El producto ya existe en el carrito, actualizar la cantidad
                    int existingCantidad = Integer.parseInt(cartModel.getValueAt(existingRowIndex, 4).toString());
                    int newCantidad = existingCantidad + 1;

                    if (newCantidad > Stock) {
                        JOptionPane.showMessageDialog(null, "No hay suficiente stock del producto.");
                    } else {
                        cartModel.setValueAt(newCantidad, existingRowIndex, 4);
                        double subtotal = precio * newCantidad;
                        cartModel.setValueAt(subtotal, existingRowIndex, 5);
                    }
                } else {
                    // El producto no existe en el carrito, agregar nueva fila
                    double subtotal = precio * cantidad;
                    int numeroVentaActual = VentaDB.obtenerNumeroVentaActual();
                    
                    Object[] rowData = { id, nombre, descripcion, precio, cantidad, subtotal, descuento, Stock, numeroVentaActual };
                    cartModel.addRow(rowData);
                }
            }
        } else {
            // Hay más de una coincidencia, mostrar opciones al usuario
            Object[] options = new Object[rowCount];
            int index = 0;
            rs.beforeFirst();
            while (rs.next()) {
                String id = rs.getString("ID_Prod");
                String nombre = rs.getString("nombre");
                String descripcion = rs.getString("descripcion");
                String filaOption = "ID: " + id + " - Nombre: " + nombre + " - Descripción: " + descripcion;
                options[index] = filaOption;
                index++;
            }

            Object selectedOption = JOptionPane.showInputDialog(null, "Se encontraron múltiples filas con el mismo lote. Por favor, elija una opción:", "Selección de fila", JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

            if (selectedOption != null) {
                String selectedID = selectedOption.toString().split("ID: ")[1].split(" -")[0]; // Obtener el ID seleccionado
                sql = "SELECT * FROM productos WHERE Lote LIKE '%" + consulta + "%' AND ID_Prod = '" + selectedID + "';";
                rs = stmt.executeQuery(sql);
                model.setRowCount(0); // Reiniciar el modelo de tabla

                while (rs.next()) {
                    String id = rs.getString("ID_Prod");
                    String lote = rs.getString("Lote");
                    String nombre = rs.getString("nombre");
                    String descripcion = rs.getString("descripcion");
                    int Stock = rs.getInt("Stock");
                    java.sql.Date fecha = rs.getDate("Fecha_Cad");
                    double precio = rs.getDouble("Precio_Venta");
                    double descuento = rs.getDouble("Descuento");

                    if (1 > Stock) {
                        JOptionPane.showMessageDialog(null, "No hay más en existencia!");
                        return; // Detener la ejecución del código
                    }

                    model.addRow(new Object[] { id, lote, nombre, descripcion, Stock, fecha, precio, descuento });
                    

                    // Verificar si el producto ya existe en el carrito
                    int existingRowIndex = -1;
                    DefaultTableModel cartModel = (DefaultTableModel) cartItemTable.getModel();
                    for (int i = 0; i < cartModel.getRowCount(); i++) {
                        String existingIDProducto = cartModel.getValueAt(i, 0).toString();
                        if (existingIDProducto.equals(id)) {
                            existingRowIndex = i;
                            break;
                        }
                    }

                    if (existingRowIndex != -1) {
                        // El producto ya existe en el carrito, actualizar la cantidad
                        int existingCantidad = Integer.parseInt(cartModel.getValueAt(existingRowIndex, 4).toString());
                        int newCantidad = existingCantidad + 1;
                        if (newCantidad > Stock) {
                            JOptionPane.showMessageDialog(null, "No hay suficiente stock del producto.");
                            continue; // Pasar al siguiente producto
                        }
                        cartModel.setValueAt(newCantidad, existingRowIndex, 4);
                        double subtotal = precio * newCantidad;
                        cartModel.setValueAt(subtotal, existingRowIndex, 5);
                    } else {
                        // El producto no existe en el carrito, agregar nueva fila
                        int cantidad = 1;
                        double subtotal = precio * cantidad;
                        int numeroVentaActual = VentaDB.obtenerNumeroVentaActual();
                        Object[] rowData = { id, nombre, descripcion, precio, cantidad, subtotal, descuento, Stock, numeroVentaActual };
                        cartModel.addRow(rowData);
                    }
                }
            } else {
                // El usuario canceló la selección
                JOptionPane.showMessageDialog(null, "Selección cancelada.");
                txtBusqueda.setText("");
            }
        }

        TotalPagar();
        txtBusqueda.setText("");
        productTable.setModel(model);

        rs.close();
        stmt.close();
        conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_BuscarActionPerformed

    private void txtBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBusquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBusquedaActionPerformed

    private void productTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseMoved
//
    }//GEN-LAST:event_productTableMouseMoved

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        int intentos = 0;
        int rowIndex = productTable.getSelectedRow();

        DefaultTableModel cartModel = (DefaultTableModel) cartItemTable.getModel();
        String ID = productTable.getValueAt(rowIndex, 0).toString();
        String nombreProducto = productTable.getValueAt(rowIndex, 2).toString();
        String descripcion = productTable.getValueAt(rowIndex, 3).toString();
        String Stock = productTable.getValueAt(rowIndex, 4).toString();
        double precio = Double.parseDouble(productTable.getValueAt(rowIndex, 6).toString());
        String descuento = productTable.getValueAt(rowIndex, 7).toString();
        int numeroVentaActual = VentaDB.obtenerNumeroVentaActual();
        
        Object cantidad = 1;

        // Obtener la cantidad disponible del producto seleccionado
        int existencia = Integer.parseInt(productTable.getValueAt(rowIndex, 4).toString());

        // Verificar si el producto ya existe en el carrito
        int existingRowIndex = -1;
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            String existingIDProducto = cartModel.getValueAt(i, 0).toString();
            if (existingIDProducto.equals(ID)) {
                existingRowIndex = i;
                break;
            }
        }

        if (existingRowIndex != -1) {
            // El producto ya existe en el carrito, actualizar la cantidad
            int existingCantidad = Integer.parseInt(cartModel.getValueAt(existingRowIndex, 4).toString());
            int newCantidad = existingCantidad + 1;
                    if (newCantidad >= 3) {
                // Mostrar un cuadro de diálogo para solicitar la cantidad deseada
                String input = JOptionPane.showInputDialog(null, "¿Cuántos productos deseas agregar?");
                try {
                    newCantidad = Integer.parseInt(input);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Cantidad inválida. Se mantendrá la cantidad actual.");
                    cantidad = existingCantidad; // Mantener la cantidad actual
                    return;
                }
            }
            // Verificar si la nueva cantidad supera la existencia
            if (newCantidad > existencia) {
                JOptionPane.showMessageDialog(null, "No hay suficientes existencia!");
                cantidad = existingCantidad;
                return; // Detener la ejecución del código
            }
            cartModel.setValueAt(newCantidad, existingRowIndex, 4);
            // Actualizar el subtotal
            
            double subtotal = precio * newCantidad;

            cartModel.setValueAt(subtotal, existingRowIndex, 5);
        } else {
            // El producto no existe en el carrito, agregar nueva fila
            // Verificar si la cantidad supera la existencia
            if (1 > existencia) {
                intentos++;
                JOptionPane.showMessageDialog(null, "No hay más en existencia xd!");
                System.out.println(intentos);
                return; // Detener la ejecución del código
            }
            double Cant=1;
            double subtotal = precio*Cant;
            Object[] rowData = {ID, nombreProducto, descripcion, precio,cantidad,subtotal,descuento,Stock, numeroVentaActual};
            cartModel.addRow(rowData);
        }

        // Actualizar el total del precio
        TotalPagar();
            JOptionPane.showMessageDialog(null, "Producto añadido a carrito!");

        
    }//GEN-LAST:event_productTableMouseClicked

    private void productTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseEntered

    }//GEN-LAST:event_productTableMouseEntered

    private void delEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delEntryActionPerformed
        limpiarTablaCarrito();
        billLabel.setText("");
        
    }//GEN-LAST:event_delEntryActionPerformed

    private void fechaInicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaInicioMouseClicked

    }//GEN-LAST:event_fechaInicioMouseClicked

    private void fechaFinLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaFinLMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaFinLMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String fechaIni = ((JTextField)fechaInicio.getDateEditor().getUiComponent()).getText();
        String fechaFin = ((JTextField)fechaFinL.getDateEditor().getUiComponent()).getText();
        
        int totalVenta = VentaDB.obtenerVentasAPrecioVentaPorFechas(fechaIni, fechaFin);
        int ganancias = VentaDB.obtenerGananciasPorFechas(fechaIni, fechaFin);
        precioVenta.setText(""+totalVenta);
        gananciasLabel.setText(String.valueOf(ganancias));
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void billingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billingTableMouseClicked
        int rowIndex = billingTable.getSelectedRow();
        int ID_Venta = Integer.parseInt(billingTable.getValueAt(rowIndex, 0).toString());
        int Total = Integer.parseInt(billingTable.getValueAt(rowIndex, 2).toString());
        String Fecha = billingTable.getValueAt(rowIndex, 1).toString();
        String Vendedor = billingTable.getValueAt(rowIndex, 3).toString();
        String Efectivo = billingTable.getValueAt(rowIndex, 4).toString();
 
        DetallesVenta dtv = new DetallesVenta(ID_Venta,Total,Fecha,Vendedor,Efectivo);
        dtv.setVisible(true);
        
    }//GEN-LAST:event_billingTableMouseClicked

    private void cartItemTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cartItemTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
        int selectedRow = cartItemTable.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) cartItemTable.getModel();
            model.removeRow(selectedRow);
            TotalPagar();
        }
      }
    }//GEN-LAST:event_cartItemTableKeyPressed

    private void EfectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EfectivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EfectivoActionPerformed

    private void txtBusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { // Verificar si se presiona la tecla Enter
        Buscar.doClick(); // Establecer el foco en el siguiente JTextField
        }
    }//GEN-LAST:event_txtBusquedaKeyPressed

    private void txtBusqueda1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBusqueda1MouseClicked
        // TODO add your handling code here:
        txtBusqueda.setText("");
    }//GEN-LAST:event_txtBusqueda1MouseClicked

    private void txtBusqueda1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBusqueda1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBusqueda1ActionPerformed

    private void txtBusqueda1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusqueda1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { // Verificar si se presiona la tecla Enter
            searchButton.doClick(); // Establecer el foco en el siguiente JTextField
        }
    }//GEN-LAST:event_txtBusqueda1KeyPressed

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonMouseClicked

    private void searchButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonMouseEntered

    private void searchButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonMouseExited

    private void searchButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMousePressed
        // TODO add your handling code here:
        searchButton.setBackground(new Color(0, 77, 64));
    }//GEN-LAST:event_searchButtonMousePressed

    private void searchButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseReleased
        // TODO add your handling code here:
        searchButton.setBackground(new Color(0, 121, 107));
    }//GEN-LAST:event_searchButtonMouseReleased

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
       String consulta = txtBusqueda1.getText();
        String sql = "SELECT * FROM productos WHERE Nombre LIKE '%" + consulta + "%' OR ID_Prod LIKE '%" + consulta +
                "%' OR Descripcion LIKE '%" + consulta + "%' OR Lote LIKE '%" + consulta + "%' OR Fecha_Cad LIKE '%" + consulta + "%';";

    
    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/miscelanea_palacios", "root", "");
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Lote");
        model.addColumn("Nombre");
        model.addColumn("Descripción");
        model.addColumn("Stock");
        model.addColumn("Fecha de Caducidad");
        model.addColumn("Precio_Venta");
        model.addColumn("Descuento");
        
        if (!rs.isBeforeFirst()) { // Si el ResultSet está vacío
            JOptionPane.showMessageDialog(null, "Sin resultados para: '" + consulta + "'.");
            txtBusqueda.setText("");
             }
        while (rs.next()) {
            String id = rs.getString("ID_Prod");
            String lote = rs.getString("Lote");
            String nombre = rs.getString("nombre");
            String descripcion = rs.getString("descripcion");
            int Stock = rs.getInt("Stock");
            java.sql.Date fecha = rs.getDate("Fecha_Cad");
            double precio = rs.getDouble("Precio_Venta");
            double descuento = rs.getDouble("Descuento");
            
            
            model.addRow(new Object[] { id,lote, nombre, descripcion, Stock, fecha, precio,descuento });
        }
        txtBusqueda.setText("");
        productTable.setModel(model);
        
        rs.close();
        stmt.close();
        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void EfectivoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EfectivoKeyPressed
        //updateButtonState();
    }//GEN-LAST:event_EfectivoKeyPressed
    private void limpiarTablaCarrito() {
    DefaultTableModel model = (DefaultTableModel) cartItemTable.getModel();
    model.setRowCount(0);
    }    
    void mostrarDatos(){
            DefaultTableModel model =  (DefaultTableModel) productTable.getModel();
        model.setRowCount(0);

        ArrayList<ProductList> list = ProductDB.checkStock();

        Object data[] = new Object[10];

        for(int i=0; i<list.size(); i++){
            data[0] = list.get(i).getID_producto();
            data[1] = list.get(i).getLote();
            data[2] = list.get(i).getNombre();
            data[3] = list.get(i).getDescripcion();
            data[4] = list.get(i).getStock();
            data[5] = list.get(i).getFecha_cad();
            data[6] = list.get(i).getPrecio_Venta();
            data[6] = list.get(i).getPrecio_Compra();
            data[7] = list.get(i).getDescuento();
            
            data[8] = "Producto";

            model.addRow(data);
        }

        list.clear();
        }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar;
    private javax.swing.JTextField Efectivo;
    private javax.swing.JButton Products;
    private javax.swing.JButton Usuarios;
    private javax.swing.JButton back;
    public static javax.swing.JLabel billLabel;
    private javax.swing.JPanel billingPanel;
    private javax.swing.JTable billingTable;
    public static javax.swing.JTable cartItemTable;
    private javax.swing.JPanel cartPanel;
    private javax.swing.JButton delEntry;
    private com.toedter.calendar.JDateChooser fechaFinL;
    private com.toedter.calendar.JDateChooser fechaInicio;
    public static javax.swing.JLabel gananciasLabel;
    private javax.swing.JPanel homePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public static javax.swing.JLabel precioVenta;
    private javax.swing.JTable productTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton sellButon;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextField txtBusqueda1;
    // End of variables declaration//GEN-END:variables

    private void registrarDetVenta() {
         int rowCount = cartItemTable.getRowCount();

    // Iterar sobre todas las filas
    for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {
        // Obtener los valores de las columnas de la fila actual
        int idVenta = VentaDB.ingresarVentaActual();
        int idProducto = Integer.parseInt(cartItemTable.getValueAt(rowIndex, 0).toString());
        int cantidad = Integer.parseInt(cartItemTable.getValueAt(rowIndex, 4).toString());
        double precioUnitario = Double.parseDouble(cartItemTable.getValueAt(rowIndex, 3).toString());
        double desc = Double.parseDouble(cartItemTable.getValueAt(rowIndex, 6).toString());
        
        Double subTotal = precioUnitario*cantidad;

        // Registrar los detalles de venta para el producto actual
        VentaDB.registrarDetallesVenta(idVenta, idProducto, cantidad, precioUnitario,subTotal, desc);

    }
    }

    private void registrarVenta() {
        String totalString = billLabel.getText();
        double total = Double.parseDouble(totalString);
        //VentaDB.insertIntoVentaDB(total,LoggerManager.getLogger());  
        VentaDB.insertIntoVentaDB(total,LoggerManager.getLogger(), Efectivo.getText());
    }

    private void TotalPagar() {
    double total = 0.0;
    DefaultTableModel cartModel = (DefaultTableModel) cartItemTable.getModel();
    for (int i = 0; i < cartModel.getRowCount(); i++) {
        double precioProducto = Double.parseDouble(cartModel.getValueAt(i, 3).toString());
        int cantidadProducto = Integer.parseInt(cartModel.getValueAt(i, 4).toString());
        int descuento = Integer.parseInt(cartModel.getValueAt(i, 7).toString());
        double descuentoAplicado = precioProducto-descuento;
        total += precioProducto*cantidadProducto;
        
    }
    billLabel.setText(String.valueOf(total));
}



    private void disminuirExistencias(){
        int rowCount = cartItemTable.getRowCount();

         // Iterar sobre todas las filas
         for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {
             // Obtener los valores de las columnas 4 y 7 de la fila actual
             int qty = Integer.parseInt(cartItemTable.getValueAt(rowIndex, 4).toString());
             int stock = Integer.parseInt(cartItemTable.getValueAt(rowIndex, 7).toString());

             // Realizar operaciones con los valores obtenidos
             int qtyTester = stock - qty;
            ProductDB.sellProductDB(Integer.parseInt(cartItemTable.getValueAt(rowIndex, 0).toString()), qtyTester);
        }
    }

}
